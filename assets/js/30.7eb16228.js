(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{362:function(e,r,t){"use strict";t.r(r);var a=t(0),s=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"一、master组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、master组件"}},[e._v("#")]),e._v(" 一、Master组件")]),e._v(" "),r("h3",{attrs:{id:"_1、api-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、api-server"}},[e._v("#")]),e._v(" 1、API Server")]),e._v(" "),r("p",[e._v("API Server 是 Kubernetes 的核心组件之一，作为集群的前端，它提供了所有操作的RESTful API。用户、管理员以及其他组件通过API Server进行交互。API Server接收REST请求，并将其转发给合适的组件处理，同时还负责认证、授权、API注册和发现等功能。")]),e._v(" "),r("h3",{attrs:{id:"_2、etcd"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、etcd"}},[e._v("#")]),e._v(" 2、ETCD")]),e._v(" "),r("p",[e._v("etcd 是一个高可用的分布式键值存储系统，用于存储K8s集群的所有数据，包括集群的配置、状态信息等。etcd的高可用性和一致性保证了K8s集群的可靠运行。")]),e._v(" "),r("h3",{attrs:{id:"_3、controller-manager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、controller-manager"}},[e._v("#")]),e._v(" 3、Controller Manager")]),e._v(" "),r("p",[e._v("Controller Manager 是K8s中的核心控制循环机制，负责管理控制器，确保集群的期望状态与实际状态一致。常见的控制器包括：")]),e._v(" "),r("ul",[r("li",[r("em",[e._v("Replication Controller")]),e._v("：确保指定数量的Pod副本运行。")]),e._v(" "),r("li",[r("em",[e._v("Endpoints Controller")]),e._v("：填充Service和Pod之间的关联信息。")]),e._v(" "),r("li",[r("em",[e._v("Namespace Controller")]),e._v("：处理命名空间的生命周期。")])]),e._v(" "),r("h3",{attrs:{id:"_4、scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、scheduler"}},[e._v("#")]),e._v(" 4、Scheduler")]),e._v(" "),r("p",[e._v("Scheduler 是负责将新创建的Pod分配到合适节点上的组件。调度器根据预定义的策略（如资源需求、硬件/软件/策略约束、亲和性和反亲和性规则等）选择最佳的节点。")]),e._v(" "),r("h2",{attrs:{id:"二、node组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、node组件"}},[e._v("#")]),e._v(" 二、Node组件")]),e._v(" "),r("h3",{attrs:{id:"_1、kubelet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、kubelet"}},[e._v("#")]),e._v(" 1、Kubelet")]),e._v(" "),r("p",[e._v("Kubelet 是运行在每个节点上的代理，负责确保Pod和它们的容器正常运行。Kubelet接收来自API Server的PodSpec，按照指定的配置创建和管理容器。")]),e._v(" "),r("h3",{attrs:{id:"_2、kube-proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、kube-proxy"}},[e._v("#")]),e._v(" 2、Kube Proxy")]),e._v(" "),r("p",[e._v("Kube Proxy 是负责维护网络规则的组件，提供集群内的服务发现和负载均衡。Kube Proxy会监视K8s API Server中的Service和Endpoints变化，并动态更新网络规则。")]),e._v(" "),r("h3",{attrs:{id:"_3、container-runtime"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、container-runtime"}},[e._v("#")]),e._v(" 3、Container Runtime")]),e._v(" "),r("p",[e._v("Container Runtime 是具体执行容器创建、启动、停止等操作的底层软件。K8s支持多种容器运行时，包括Docker、containerd、CRI-O等。Kubelet通过CRI（容器运行时接口）与容器运行时进行通信。")]),e._v(" "),r("h2",{attrs:{id:"三、辅助组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、辅助组件"}},[e._v("#")]),e._v(" 三、辅助组件")]),e._v(" "),r("h3",{attrs:{id:"_1、dns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、dns"}},[e._v("#")]),e._v(" 1、DNS")]),e._v(" "),r("p",[e._v("K8s内置了DNS服务，用于为每个Service创建DNS记录。容器可以使用这些DNS名称来发现和访问Service。")]),e._v(" "),r("h3",{attrs:{id:"_2、dashboard"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、dashboard"}},[e._v("#")]),e._v(" 2、Dashboard")]),e._v(" "),r("p",[e._v("Dashboard 是K8s的Web UI，用户可以通过它管理和监控集群资源，查看日志，进行故障排查等操作。")]),e._v(" "),r("h3",{attrs:{id:"_3、ingress-controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、ingress-controller"}},[e._v("#")]),e._v(" 3、Ingress Controller")]),e._v(" "),r("p",[e._v("Ingress Controller 是一种允许外部HTTP和HTTPS流量进入集群的组件。它管理Ingress资源，提供URL路由、负载均衡、SSL终止等功能。")]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("Kubernetes 的核心组件紧密协作，确保集群的高可用性和弹性扩展。API Server 提供统一的接口，etcd 保证数据的一致性，Controller Manager 和 Scheduler 确保集群状态与期望状态一致，Kubelet 和 Kube Proxy 在节点上执行具体操作。理解这些核心组件及其工作原理，是掌握Kubernetes的关键。")])])}),[],!1,null,null,null);r.default=s.exports}}]);